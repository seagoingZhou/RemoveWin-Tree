@startuml bench

abstract class Generator {
__ public __
+ Generator()
+ Next()
+ Last()
}

class CoreGenerator {
__ public __
+ CoreGenerator()
+ buildKeyName()
__ private __
- keychooser: Generator<uint64_t>
- zeropading: int
- minimal: int
- maximal: int
}

class Tree{
__ public __
+ node
+ tree
+ Tree() 
+ getParentId()
+ getNonLeafId()
+ insert()
+ del()
+ changevalue()
+ subtree()
}

class Uid{
__ public __
+ Uid()
+ Next(): string

}

class BenchMain{
__ public __
+ main(): int
+ test_changechange_conflict(): void
+ test_deletechange_conflict(): void
+ test_deletechangeindirect_conflict(): void
+ test_deleteinsert_conflict(): void
+ test_deleteinsertindirect_conflict(): void
+ test_deletedelete_conflict(): void
+ treeMentain(): void
+ writeTree_local(): void
+ write_redisReply(): void
__ private __
- ips: vector<string>
- ports: vector<int>
}

BenchMain <-- Tree
BenchMain <-- Uid
BenchMain <-- CoreGenerator 
CoreGenerator <|-- Generator
@enduml